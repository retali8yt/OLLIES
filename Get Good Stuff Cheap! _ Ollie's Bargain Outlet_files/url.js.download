(function($, undefined) {
	/* TODO FIXME fix concept of URI to support things like mailto */
	"use strict";
	var defaults = {
		url: window.location.href,
		isFile: false,
		checkIfFileFunction: null,
		element: null,
		schemeOnly: false,
		hostOnly: false,
		pathOnly: false,
		fileOnly: false,
		queryOnly: false,
		hashOnly: false,
		excludeScheme: false,
		excludeHost: false,
		excludePath: false,
		excludeUsername: false,
		excludePassword: false,
		excludeFile: false,
		excludeQuery: false,
		excludeHash: false,
		inferConfigFromElement: false,
		bindToCurrentAddress: false,
		pathPrefix: "//",
		autocommit: false
	};

	if (typeof Object.create !== 'function') {
	    Object.create = function (o) {
	        function F() { }
	        F.prototype = o;
	        return new F();
	    };
	}

	UrlArray.prototype = Object.create(Array.prototype);

	function UrlArray() {
		if ($.undefined(UrlArray.prototype[UrlPlugin.prototype[0]])) {
			var names = UrlPlugin.prototype;
			for (var name in names) {
				(function(localName) {
					UrlArray.prototype[localName] = function() {
						var ret = (function(arr, funcName, args) {
							var ret = new UrlArray();
							for (var i = 0; i < arr.length; i++) {
								(function(urlElement, funcName, args) {
									/* Call the appropriate function on all URL objects */
									ret.push(urlElement[funcName].apply(urlElement, args));
								})(arr[i], funcName, args);
							}
							return ret;
						})(this, localName, arguments);

						return ret;
					};
				})(name);
			}
		}
	}

	function AddressPlugin(options) {
		this.options = options;
		this.init();
	}

	AddressPlugin.prototype = {
		init: function() { },

		redirect: function(url) {
			if (url instanceof UrlPlugin) url = url.toString();
			window.location.href = url;
		},

		hash: function(hash) {
			if (hash instanceof UrlPlugin) hash = hash.hash();
			window.location.hash = hash;
		},

		update: function(url) {
			if (url instanceof UrlPlugin) url = url.toString();
			window.history.replaceState(null, document.title, url);
		},

		current: function(autocommit) {
			if ($.undefined(autocommit) || autocommit !== true || autocommit !== false) autocommit = false;
			return $.url({bindToCurrentAddress: true, autocommit: autocommit});
		}
	};

	function UrlPlugin(options, elem) {
		if (typeof options === "string") {
			options = {url: options};
		}

		var queriedElementAndFailed = false;
		if ($.defined(elem)) {
			if ($.undefined(options)) options = {};

			options.element = elem;
			if ($.undefined(options.inferConfigFromElement)) {
				options.inferConfigFromElement = true;
			}
			if ($.undefined(options.url) || options.url == null || options.url === "") {
				var queryElement = function(elem) {
					var tagName = $.prop(elem, "tagName").toLowerCase();
					var url = null;
					if (["a", "link", "area"].indexOf(tagName) != -1) url = $.attr(elem, "href");
					else if (["img", "script", "frame", "iframe", "input"].indexOf(tagName) != -1) url = $.attr(elem, "src");
					else if (["form"].indexOf(tagName) != -1) url = $.attr(elem, "action");
					return url;
				};
				options.url = queryElement(elem);
				queriedElementAndFailed = options.url == null;
			}
		}

		this._options = $.extend({}, defaults, options);
		if (queriedElementAndFailed) this._options.url = null;

		this._query = {};
		this._hash = null;
		this._host = null;
		this._port = null;
		this._path = null;
		this._scheme = null;
		this._file = null;
		this._extension = null;
		this._relativeScheme = false;
		this.init();
	}

	UrlPlugin.prototype = (function() {
		var getScheme = function() { return window.location.protocol.substring(0, window.location.protocol.length - 1); };
		var pruneUrl = function(url) { return url.split("#").splice(0, 1).join("").split("?").splice(0, 1).join(""); };
		var surroundUrl = function(url, endsWithSlash) {
			if ($.undefined(endsWithSlash)) endsWithSlash = false;
			if (url.charAt(0) !== "/") url = "/" + url;
			if (!endsWithSlash && url.length > 1 && url.charAt(url.length - 1) !== "/") url += "/";
			return url;
		};
		var parseUser = function(username) {
			var ret = [null, null];
			var idx = username.indexOf(":");
			if (idx != -1) {
				ret[0] = username.substring(0, idx);
				ret[1] = username.substring(idx + 1, username.length);
			}
			else ret[0] = username;

			return ret;
		};
		var parseHost = function(fullHost) {
			var ret = [null, null, null, null];
			var idx = null;
			var usernameIdx = fullHost.indexOf("@");
			if (usernameIdx != -1) {
				var userpass = parseUser(fullHost.substring(0, usernameIdx));
				fullHost = fullHost.substring(usernameIdx + 1, fullHost.length);
				ret[2] = userpass[0];
				ret[3] = userpass[1];
			}
			idx = fullHost.indexOf(":");
			if (idx != -1) {
				ret[0] = fullHost.substring(0, idx);
				ret[1] = fullHost.substring(idx + 1, fullHost.length);
			}
			else ret[0] = fullHost;

			return ret;
		};
		var parseFile = function(file) {
			var ret = [null, null];

			var idx = file.indexOf(".");
			if (idx != -1) {
				ret[0] = file.substring(0, idx);
				ret[1] = file.substring(idx + 1, file.length);
			}
			else ret[0] = file;
			
			return ret;
		};
		var parsePath = function(fullPath) {
			var ret = [null, null, null];
			
			var parts = fullPath.split("/");
			var lastPart = parts[parts.length - 1];

			/* Trailing slashes have no file/extension */
			if (lastPart === "" || lastPart === "/") ret[0] = fullPath;
			else {
				var fileParsed = parseFile(lastPart);

				ret[0] = surroundUrl(parts.slice(0, -1).join("/"));
				ret[1] = fileParsed[0];
				ret[2] = fileParsed[1];
			}

			return ret;
		};
		var updateElement = function(elem, url) {
			if ($.undefined(elem) || elem == null) return;

			var tagName = $.prop(elem, "tagName").toLowerCase();
			if (["a", "link", "area"].indexOf(tagName) != -1) $.attr(elem, "href", url.toString());
			else if (["img", "script", "frame", "iframe", "input"].indexOf(tagName) != -1) $.attr(elem, "src", url.toString());
			else if (["form"].indexOf(tagName) != -1) $.attr(elem, "action", url.toString());
		};
		var updateAddress = function(url, bindToCurrentAddress) {
			if (!bindToCurrentAddress) return;
			$.address.update(url.toString());
		}

		return {
			init: function() {
				this._firstLoad = true;
				this.reset();
				this._firstLoad = false;
			},

			query: function(arg, val, keepBlank) {
				if ($.undefined(arg)) return this._query;
				if ($.undefined(val)) {
					if (arg instanceof Array) {
						var ret = [];
						for (var key in arg) {
							ret.push(this.query(arg[key]));
						}
						return ret;
					}

					if (arg == null) {
						this._query = {};
						if (this._options.autocommit) this.commit();
						return this;
					}

					return this._query[arg];
				}
				
				if (arg instanceof Array && val instanceof Array) {
					for (var i = 0; i < arg.length; i++) {
						this.query(arg[i], val[i], keepBlank);
					}
				}
				else if (arg instanceof Array) {
					for (var key in arg) {
						this.query(arg[key], val, keepBlank);
					}	
				}
				else if (val instanceof Array) this._query[arg] = val.join();
				else if (val == null && !keepBlank) delete this._query[arg];
				else this._query[arg] = val;

				if (this._options.autocommit) this.commit();
				return this;
			},

			username: function(val) {
				if ($.undefined(val)) return this._username;
				var parsed = parseUser(val);
				this._username = parsed[0];
				this._password = parsed[1];
				if (this._options.autocommit) this.commit();
				return this;
			},

			password: function(val) {
				if ($.undefined(val)) return this._password;
				this._password = val;
				if (this._options.autocommit) this.commit();
				return this;
			},

			host: function(val) {
				if ($.undefined(val)) return this._host;
				var parsed = parseHost(val);
				this._host = parsed[0];
				this._port = parsed[1];
				this._username = parsed[2];
				this._password = parsed[3];
				if (this._options.autocommit) this.commit();
				return this;
			},

			hash: function(val) {
				if ($.undefined(val)) return this._hash;
				this._hash = val;
				if (this._options.autocommit) this.commit();
				return this;
			},

			fragment: function(val) {
				return this.hash(val);
			},

			path: function(val) {
				if ($.undefined(val)) return this._path;
				if (val == null) val = "/";

				var pathParsed = parsePath(val);
				this._path = pathParsed[0];
				if (pathParsed[1] != null) {
					this._file = pathParsed[1];
					this._extension = pathParsed[2];
				}

				if (this._options.autocommit) this.commit();
				return this;
			},

			segments: function(arg) {
				if ($.undefined(arg)) {
					if (this._path == null) return [];
					return this._path.split("/").slice(1, -1);
				}
				this.path("/");
				this.appendSegment(arg);
				return this;
			},

			removeSegment: function(idx) {
				if ($.undefined(idx)) return this;

				var segments = this.segments();
				if (idx instanceof Array) {
					for (var i = idx.length - 1; i > -1; i--) {
						segments.splice(idx[i], 1);
					}
				}
				else {
					segments.splice(idx, 1);
				}

				this.path("/");
				this.appendSegment(segments);
				return this;
			},

			insertSegment: function(val, idx) {
				if ($.undefined(val)) return this;
				if ($.undefined(idx)) idx = 0;
				var segments = this.segments();
				
				if (typeof val === "string") {
					if (idx instanceof Array) {
						for (var i = idx.length - 1; i > -1; i--) {
							segments.splice(idx[i], 0, val);
						}			
					}
					else segments.splice(idx, 0, val);
				}
				else if (val instanceof Array) {
					for (var i = val.length - 1; i > -1; i--) {
						var insertIndex = (idx instanceof Array ? idx[i] : idx);
						segments.splice(insertIndex, 0, val[i]);
					}
				}
				
				this.path("/");
				this.appendSegment(segments);
				return this;
			},

			appendSegment: function(val) {
				if ($.undefined(val) || val == null) return this;
				
				if (typeof val === "string") {
					if (val.charAt(0) === "/") val = val.substring(1);
					
					val = this.path() + val;

					var pathParsed = parsePath(val);
					this._path = pathParsed[0];
					if (pathParsed[1] != null) {
						this._file = pathParsed[1];
						this._extension = pathParsed[2];
					}
				}
				else if (val instanceof Array) {
					for (var key in val) {
						var pathSegment = val[key];
						if (pathSegment.indexOf(".") == -1) pathSegment += "/"
						this.appendSegment(pathSegment);
					}
				}

				if (this._options.autocommit) this.commit();
				return this;
			},

			port: function(val) {
				if ($.undefined(val)) return this._port;
				this._port = val;
				if (this._options.autocommit) this.commit();
				return this;
			},

			file: function(val) {
				if ($.undefined(val)) return this._file;
				var fileParsed = parseFile(val);
				this._file = fileParsed[0];
				this._extension = fileParsed[1];
				if (this._options.autocommit) this.commit();
				return this;
			},

			extension: function(val) {
				if ($.undefined(val)) return this._extension;
				this._extension = val;
				if (this._options.autocommit) this.commit();
				return this;
			},

			scheme: function(val) {
				if ($.undefined(val)) return this._scheme;
				this._scheme = val;
				if (this._options.autocommit) this.commit();
				return this;
			},

			protocol: function(val) {
				return this.scheme(val);
			},

			toString: function() {
				var url = "";
				var anyOnly = this._options.schemeOnly || this._options.hostOnly || this._options.pathOnly || this._options.fileOnly || this._options.queryOnly || this._options.hashOnly;
				
				if (!this._options.excludeScheme && this._scheme != null && (!anyOnly || this._options.schemeOnly)) url += this._scheme + ":" + this._options.pathPrefix;
				if (!this._options.excludeHost && (!anyOnly || this._options.hostOnly)) {
					if (this._host != null) {
						if (!this._options.excludeUsername) {
							if (this._username != null) url += this._username;
							if (!this._options.excludePassword) {
								if (this._password != null) url += ":" + this._password;
							}
							if (this._username != null) url += "@";
						}
						url += this._host;
					}
					if (this._port != null) url += ":" + this._port;
				}
				if (!this._options.excludePath && this._path != null && (!anyOnly || this._options.pathOnly)) url += this._path;
				if (!this._options.excludeFile && (!anyOnly || this._options.fileOnly)) {
					if (this._file != null) url += this._file;
					if (this._extension != null) url += "." + this._extension;
				}
				if (!this._options.excludeQuery && (!anyOnly || this._options.queryOnly)) {
					var newQs = "";
					var encode = function (s) { return encodeURIComponent(s); };

					for (var key in this._query) {
						if (newQs !== "") newQs += "&";
						else newQs += "?";

						var val = this._query[key];
						newQs += encode(key);
						if ($.defined(val) && val != null) newQs += "=" + encode(val);
					}
					url += newQs;
				}
				if (!this._options.excludeHash && this._hash != null && (!anyOnly || this._options.hashOnly)) url += "#" + this._hash;
				return url;
			},

			originalUrl: function() {
				return this._options.url;
			},

			commit: function() {
				updateElement(this._options.element, this);
				updateAddress(this, this._options.bindToCurrentAddress);
				return this;
			},

			reset: function(newOriginalUrl) {
				if ($.defined(newOriginalUrl)) this._options.url = newOriginalUrl;
				var url = this._options.url;
				var qs = null;
				var infer = this._options.inferConfigFromElement && this._options.element != null;

				if (url == null) return;

				/* Not a URL at all */
				if (url.indexOf("javascript:") != -1) {
					if (infer) {
						this._file = url;
						this._options.fileOnly = true;
					}
					return;
				}

				/* Special case... */
				if (url.indexOf("#") === 0) {
					this._host = window.location.host;
					this._scheme = getScheme();
					this._path = window.location.pathname;
					this._hash = url.substring(1);
					qs = window.location.search;
					if (infer) this._options.hashOnly = true;
				}
				else {
					var pattern = RegExp("^(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(\\?(?:[^#]*))?(#(?:.*))?");
					var matches = url.match(pattern);

					if ($.defined(matches[5])) this._hash = matches[5].substring(1);
					if ($.defined(matches[1]) && matches[1].match(/\d+/) == null) this._scheme = matches[1];
					if ($.defined(matches[4])) qs = matches[4];
					if ($.defined(matches[3])) this._path = matches[3];
					else this._path = "/";

					if ($.defined(matches[2])) {
						this._host = matches[2];
						if (url.indexOf("//") == 0) {
							this._scheme = getScheme();
							this._relativeScheme = true;
						}
					}
					else if ($.defined(matches[1])) {
						/* We have no path and we do have a specified scheme, meaning it's probably a simpler URI such as mailto */
						this._host = this._path;
						this._path = null;
					}
					else {
						/* If the URL starts with a slash, it may be a relative URL or a protocol-specific absolute URL */
						var parts = pruneUrl(url).split("/");
						var endsWithSlash = url.charAt(url.length - 1) !== "/";
						var firstPart = parts[0];

						if (firstPart === "" || firstPart === "/") {
							firstPart = parts[1];
							if (firstPart == "" || firstPart === "/") {
								/* We have a relative scheme absolute URL */
								this._scheme = getScheme();
								this._host = parts.splice(2, 3).join("");
								this._path = parts.splice(3).join("/");
								this._relativeScheme = true;
							}
							else {
								/* Just a relative URL */
								this._host = window.location.host;
								this._scheme = getScheme();
								this._path = "/" + parts.splice(1).join("/");
								if (infer) this._options.excludeScheme = true;
								if (infer) this._options.excludeHost = true;
							}
						}
						else {
							/*
								Might be a file in the current directory (e.g. a href="default.htm") or a host (e.g. google.com)
								By default, we assume it"s a host because it"s really hard to disambiguate between files and hosts
								The user is provided two ways to define that it is a file, one is direct
								The other is defining a function to check and see if the last segment is a file
								e.g. $("a").url({checkIfFileFunction: function(f) { return f.IndexOf(".com") == -1; });
							*/

							var isFile = this._options.isFile || (this._options.checkIfFileFunction != null && this._options.checkIfFileFunction(firstPart));
							this._host = (isFile ? window.location.host : firstPart);
							this._file = (isFile ? firstPart : null);
							this._path = parts.slice(1).join("/");
							this._scheme = getScheme();
							this._path = surroundUrl(this._path, endsWithSlash);
							if (infer) this._options.excludeScheme = true;
						}
					}
				}

				if (this._host !== null) {
					var hostParsed = parseHost(this._host);
					if (hostParsed[1] != null) {
						this._host = hostParsed[0];
						this._port = hostParsed[1];
						this._username = hostParsed[2];
						this._password = hostParsed[3];
					}
				}
				else if (infer) this._options.excludeHost = true;

				if (this._path !== null && this._path !== "/" && this._path !== "") {
					var pathParsed = parsePath(this._path);
					this._path = pathParsed[0];
					this._file = pathParsed[1];
					this._extension = pathParsed[2];
				}
				else {
					if (infer) this._options.excludePath = true;
					this._path = "/";
				}
				
				if (qs != null) {
					var match;
					var pl = /\+/g;
					var search = /([^&=]+)=?([^&]*)/g;
					var decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); };
					var query = qs.substring(1);
					while (match = search.exec(query)) {
						if (match != null) {
							this._query[decode(match[1])] = decode(match[2]);
						}
					}
				}

				if (!this._firstLoad) this.commit();
				return this;
			}
		};
	})();

	$.extend({
		defined: function(obj) { return typeof obj !== "undefined"; },
		undefined: function(obj) { return typeof obj === "undefined"; },
		url: function(url) { return new UrlPlugin(url); },
		buildUrl: function() { return new UrlPlugin({url: null}); },
		address: new AddressPlugin(),
	});

	$.fn.url = function(options) {
		var collection = this;
		var ret = new UrlArray();
		collection.each(function() {			
			if (!$.data(this, "url-plugin") || $.defined(options)) {
				(function(elem, localOptions) {
					$.data(elem, "url-plugin", new UrlPlugin(localOptions, elem));
				})(this, options);
			}
			ret.push($.data(this, "url-plugin"));
		});

		return ret;
	};
})(jQuery);